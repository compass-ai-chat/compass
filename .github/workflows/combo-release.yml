name: Release Build

on:
  push:
    branches:
      - release

# Add permissions block
permissions:
  contents: write
  packages: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.11.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm install
        
      - name: Get Version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  android-build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.11.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android APK
        id: eas-build
        run: |
          OUTPUT=$(eas build -p android --profile preview --non-interactive)
          APK_URL=$(echo "$OUTPUT" | grep -o 'https://expo.dev/artifacts/eas/[^[:space:]]*\.apk')
          echo "APK_URL=$APK_URL" >> $GITHUB_ENV

      - name: Download APK
        run: |
          curl -L -o compass.apk "${{ env.APK_URL }}"

      - name: Install qrencode
        run: sudo apt-get install -y qrencode

      - name: Generate QR Code
        run: |
          qrencode -o compass-qr.png "https://github.com/nordwestt/compass/releases/download/v${{ needs.setup.outputs.version }}/compass.apk"
        
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: compass-apk
          path: compass.apk

      - name: Upload QR Code
        uses: actions/upload-artifact@v4
        with:
          name: compass-qr
          path: compass-qr.png

  docker-build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:v${{ needs.setup.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  web-deploy:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.11.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build and Deploy
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          npm run predeploy
          npm run deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install qrencode
        run: sudo apt-get install -y qrencode

      - name: Generate QR Code
        run: |
          qrencode -o compass-qr.png "https://nordwestt.com/compass"
        
      - name: Upload QR Code
        uses: actions/upload-artifact@v4
        with:
          name: compass-qr
          path: compass-qr.png

    

  create-release:
    needs: [setup, docker-build, web-deploy, android-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: compass-apk
          
      - name: Download QR Code
        uses: actions/download-artifact@v4
        with:
          name: compass-qr

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            compass.apk
            compass-qr.png
          tag_name: v${{ needs.setup.outputs.version }}
          name: Release v${{ needs.setup.outputs.version }}
          body: |
            Android APK and Docker image are now available.

            üì± Android APK QR code:
            ![QR Code](https://github.com/nordwestt/compass/releases/download/v${{ needs.setup.outputs.version }}/compass-qr.png)

            üêã Docker image:
            - `ghcr.io/${{ github.repository }}:latest`
            - `ghcr.io/${{ github.repository }}:v${{ needs.setup.outputs.version }}`
            
            To pull and run the Docker image:
            ```bash
            docker pull ghcr.io/${{ github.repository }}:latest
            docker run --network host -p 80:80 ghcr.io/${{ github.repository }}:latest
            ```

            Then you can use compass by visiting "http://localhost/compass" in your browser.
            This image comes pre-packaged with a proxy server that allows you to use Ollama without any configuration.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 